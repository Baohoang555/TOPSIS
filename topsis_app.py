import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="TOPSIS - Ph√¢n t√≠ch R·ªßi ro C·ªï phi·∫øu",
    page_icon="üìà",
    layout="wide"
)

# CSS t√πy ch·ªânhC:\python313\python.exe -m streamlit run c:/Users/Administrator/Desktop/topsis_app.py

st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #4F46E5;
        margin-bottom: 1rem;
    }
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1.5rem;
        border-radius: 1rem;
        color: white;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    .risk-low {
        background-color: #10B981;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
        font-weight: bold;
    }
    .risk-medium {
        background-color: #F59E0B;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
        font-weight: bold;
    }
    .risk-high {
        background-color: #EF4444;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)

# Ti√™u ƒë·ªÅ
st.markdown('<div class="main-header">üìà Ph√¢n t√≠ch R·ªßi ro C·ªï phi·∫øu - TOPSIS</div>', unsafe_allow_html=True)

# Th√¥ng tin thu·∫≠t to√°n
with st.expander("‚ÑπÔ∏è Gi·ªõi thi·ªáu v·ªÅ TOPSIS"):
    st.info("""
    **TOPSIS** (Technique for Order of Preference by Similarity to Ideal Solution) 
    ƒë√°nh gi√° c·ªï phi·∫øu d·ª±a tr√™n ƒë·ªô g·∫ßn v·ªõi gi·∫£i ph√°p l√Ω t∆∞·ªüng.
    
    **C√°c b∆∞·ªõc th·ª±c hi·ªán:**
    1. Chu·∫©n b·ªã ma tr·∫≠n quy·∫øt ƒë·ªãnh
    2. Chu·∫©n h√≥a ma tr·∫≠n (Vector normalization)
    3. T√≠nh ma tr·∫≠n tr·ªçng s·ªë chu·∫©n h√≥a
    4. X√°c ƒë·ªãnh gi·∫£i ph√°p l√Ω t∆∞·ªüng d∆∞∆°ng (A+) v√† √¢m (A-)
    5. T√≠nh kho·∫£ng c√°ch Euclidean ƒë·∫øn A+ v√† A-
    6. T√≠nh ƒëi·ªÉm TOPSIS = A-/(A+ + A-)
    
    **ƒêi·ªÉm c√†ng cao = R·ªßi ro c√†ng th·∫•p, Ti·ªÅm nƒÉng c√†ng t·ªët**
    """)

# Kh·ªüi t·∫°o session state
if 'stocks_data' not in st.session_state:
    st.session_state.stocks_data = pd.DataFrame({
        'M√£ CP': ['VNM', 'VIC', 'VHM', 'HPG'],
        'Gi√° mua': [75000, 42000, 58000, 28000],
        'Gi√° b√°n': [82000, 45000, 62000, 30000],
        'KL GD': [1500000, 2800000, 3200000, 5100000],
        'P/E': [18.5, 15.2, 12.8, 9.5],
        'EPS': [4200, 2800, 4500, 2950],
        'ROE (%)': [25.3, 18.7, 22.1, 19.4],
        'N·ª£/V·ªën': [0.35, 0.52, 0.48, 0.41]
    })

# Sidebar - C·∫•u h√¨nh tr·ªçng s·ªë
st.sidebar.header("‚öñÔ∏è Tr·ªçng s·ªë c√°c ti√™u ch√≠")
st.sidebar.markdown("*T·ªïng tr·ªçng s·ªë n√™n b·∫±ng 1.0*")

weights = {
    'priceChange': st.sidebar.slider('Bi·∫øn ƒë·ªông gi√° (%)', 0.0, 1.0, 0.20, 0.05),
    'volume': st.sidebar.slider('Kh·ªëi l∆∞·ª£ng GD', 0.0, 1.0, 0.15, 0.05),
    'pe': st.sidebar.slider('P/E', 0.0, 1.0, 0.15, 0.05),
    'eps': st.sidebar.slider('EPS', 0.0, 1.0, 0.20, 0.05),
    'roe': st.sidebar.slider('ROE (%)', 0.0, 1.0, 0.20, 0.05),
    'debt': st.sidebar.slider('N·ª£/V·ªën', 0.0, 1.0, 0.10, 0.05)
}

total_weight = sum(weights.values())
if abs(total_weight - 1.0) > 0.01:
    st.sidebar.warning(f"‚ö†Ô∏è T·ªïng tr·ªçng s·ªë: {total_weight:.2f} (n√™n = 1.0)")
else:
    st.sidebar.success(f"‚úÖ T·ªïng tr·ªçng s·ªë: {total_weight:.2f}")

# Nh·∫≠p d·ªØ li·ªáu c·ªï phi·∫øu
st.header("üìä D·ªØ li·ªáu c·ªï phi·∫øu")

col1, col2 = st.columns([3, 1])
with col2:
    if st.button("‚ûï Th√™m c·ªï phi·∫øu", use_container_width=True):
        new_row = pd.DataFrame({
            'M√£ CP': [f'CP{len(st.session_state.stocks_data)+1}'],
            'Gi√° mua': [50000],
            'Gi√° b√°n': [55000],
            'KL GD': [1000000],
            'P/E': [15.0],
            'EPS': [3000],
            'ROE (%)': [20.0],
            'N·ª£/V·ªën': [0.4]
        })
        st.session_state.stocks_data = pd.concat([st.session_state.stocks_data, new_row], ignore_index=True)
        st.rerun()

# Hi·ªÉn th·ªã v√† ch·ªânh s·ª≠a d·ªØ li·ªáu
edited_df = st.data_editor(
    st.session_state.stocks_data,
    num_rows="dynamic",
    use_container_width=True,
    column_config={
        "M√£ CP": st.column_config.TextColumn("M√£ CP", width="small"),
        "Gi√° mua": st.column_config.NumberColumn("Gi√° mua (VNƒê)", format="%d"),
        "Gi√° b√°n": st.column_config.NumberColumn("Gi√° b√°n (VNƒê)", format="%d"),
        "KL GD": st.column_config.NumberColumn("KL GD", format="%d"),
        "P/E": st.column_config.NumberColumn("P/E", format="%.2f"),
        "EPS": st.column_config.NumberColumn("EPS", format="%d"),
        "ROE (%)": st.column_config.NumberColumn("ROE (%)", format="%.2f"),
        "N·ª£/V·ªën": st.column_config.NumberColumn("N·ª£/V·ªën", format="%.2f")
    }
)
st.session_state.stocks_data = edited_df

# H√†m t√≠nh TOPSIS
def calculate_topsis(df, weights):
    # B∆∞·ªõc 1: T√≠nh c√°c ch·ªâ s·ªë
    df['Bi·∫øn ƒë·ªông gi√° (%)'] = ((df['Gi√° b√°n'] - df['Gi√° mua']) / df['Gi√° mua']) * 100
    
    # B∆∞·ªõc 2: Chu·∫©n b·ªã ma tr·∫≠n quy·∫øt ƒë·ªãnh
    criteria_cols = ['Bi·∫øn ƒë·ªông gi√° (%)', 'KL GD', 'P/E', 'EPS', 'ROE (%)', 'N·ª£/V·ªën']
    decision_matrix = df[criteria_cols].values
    
    # B∆∞·ªõc 3: Chu·∫©n h√≥a ma tr·∫≠n (Vector normalization)
    normalized = decision_matrix / np.sqrt((decision_matrix ** 2).sum(axis=0))
    
    # B∆∞·ªõc 4: T√≠nh ma tr·∫≠n tr·ªçng s·ªë
    weights_array = np.array([weights['priceChange'], weights['volume'], 
                              weights['pe'], weights['eps'], 
                              weights['roe'], weights['debt']])
    weighted_normalized = normalized * weights_array
    
    # B∆∞·ªõc 5: X√°c ƒë·ªãnh A+ v√† A-
    # Benefit criteria: Bi·∫øn ƒë·ªông gi√°, KL GD, EPS, ROE (cao h∆°n t·ªët h∆°n)
    # Cost criteria: P/E, N·ª£/V·ªën (th·∫•p h∆°n t·ªët h∆°n)
    benefit_idx = [0, 1, 3, 4]
    cost_idx = [2, 5]
    
    ideal_positive = np.zeros(len(criteria_cols))
    ideal_negative = np.zeros(len(criteria_cols))
    
    for i in range(len(criteria_cols)):
        if i in benefit_idx:
            ideal_positive[i] = weighted_normalized[:, i].max()
            ideal_negative[i] = weighted_normalized[:, i].min()
        else:
            ideal_positive[i] = weighted_normalized[:, i].min()
            ideal_negative[i] = weighted_normalized[:, i].max()
    
    # B∆∞·ªõc 6: T√≠nh kho·∫£ng c√°ch
    distance_positive = np.sqrt(((weighted_normalized - ideal_positive) ** 2).sum(axis=1))
    distance_negative = np.sqrt(((weighted_normalized - ideal_negative) ** 2).sum(axis=1))
    
    # B∆∞·ªõc 7: T√≠nh ƒëi·ªÉm TOPSIS
    topsis_score = distance_negative / (distance_positive + distance_negative)
    
    return topsis_score, distance_positive, distance_negative

# N√∫t t√≠nh to√°n
if st.button("üßÆ T√≠nh to√°n TOPSIS", type="primary", use_container_width=True):
    if len(st.session_state.stocks_data) < 2:
        st.error("‚ö†Ô∏è C·∫ßn √≠t nh·∫•t 2 c·ªï phi·∫øu ƒë·ªÉ so s√°nh!")
    else:
        # T√≠nh TOPSIS
        scores, dist_pos, dist_neg = calculate_topsis(st.session_state.stocks_data, weights)
        
        # T·∫°o DataFrame k·∫øt qu·∫£
        results_df = st.session_state.stocks_data.copy()
        results_df['ƒêi·ªÉm TOPSIS'] = scores
        results_df['Kho·∫£ng c√°ch A+'] = dist_pos
        results_df['Kho·∫£ng c√°ch A-'] = dist_neg
        results_df['Bi·∫øn ƒë·ªông gi√° (%)'] = ((results_df['Gi√° b√°n'] - results_df['Gi√° mua']) / results_df['Gi√° mua']) * 100
        
        # X·∫øp h·∫°ng
        results_df = results_df.sort_values('ƒêi·ªÉm TOPSIS', ascending=False).reset_index(drop=True)
        results_df['X·∫øp h·∫°ng'] = range(1, len(results_df) + 1)
        
        # Ph√¢n lo·∫°i r·ªßi ro
        def get_risk_level(score):
            if score >= 0.7:
                return 'R·ªßi ro th·∫•p'
            elif score >= 0.5:
                return 'R·ªßi ro trung b√¨nh'
            else:
                return 'R·ªßi ro cao'
        
        results_df['M·ª©c r·ªßi ro'] = results_df['ƒêi·ªÉm TOPSIS'].apply(get_risk_level)
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        st.header("üèÜ K·∫øt qu·∫£ ph√¢n t√≠ch")
        
        # Bi·ªÉu ƒë·ªì c·ªôt ƒëi·ªÉm TOPSIS
        fig_bar = go.Figure(data=[
            go.Bar(
                x=results_df['M√£ CP'],
                y=results_df['ƒêi·ªÉm TOPSIS'] * 100,
                text=results_df['ƒêi·ªÉm TOPSIS'].apply(lambda x: f"{x*100:.2f}"),
                textposition='auto',
                marker=dict(
                    color=results_df['ƒêi·ªÉm TOPSIS'],
                    colorscale='RdYlGn',
                    showscale=True,
                    colorbar=dict(title="ƒêi·ªÉm TOPSIS")
                )
            )
        ])
        fig_bar.update_layout(
            title="ƒêi·ªÉm TOPSIS theo c·ªï phi·∫øu",
            xaxis_title="M√£ c·ªï phi·∫øu",
            yaxis_title="ƒêi·ªÉm TOPSIS (%)",
            height=400
        )
        st.plotly_chart(fig_bar, use_container_width=True)
        
        # Hi·ªÉn th·ªã chi ti·∫øt t·ª´ng c·ªï phi·∫øu
        for idx, row in results_df.iterrows():
            risk_class = 'risk-low' if row['M·ª©c r·ªßi ro'] == 'R·ªßi ro th·∫•p' else (
                'risk-medium' if row['M·ª©c r·ªßi ro'] == 'R·ªßi ro trung b√¨nh' else 'risk-high'
            )
            
            with st.container():
                st.markdown("---")
                col1, col2, col3 = st.columns([1, 3, 2])
                
                with col1:
                    st.markdown(f"### üèÖ #{row['X·∫øp h·∫°ng']}")
                    st.markdown(f"## **{row['M√£ CP']}**")
                
                with col2:
                    st.markdown(f'<span class="{risk_class}">{row["M·ª©c r·ªßi ro"]}</span>', unsafe_allow_html=True)
                    st.metric("Bi·∫øn ƒë·ªông gi√°", f"{row['Bi·∫øn ƒë·ªông gi√° (%)']:.2f}%", 
                             delta=f"{row['Bi·∫øn ƒë·ªông gi√° (%)']:.2f}%")
                
                with col3:
                    st.metric("ƒêi·ªÉm TOPSIS", f"{row['ƒêi·ªÉm TOPSIS']*100:.2f}", 
                             help="ƒêi·ªÉm c√†ng cao c√†ng t·ªët")
                
                # Chi ti·∫øt c√°c ch·ªâ s·ªë
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("P/E", f"{row['P/E']:.2f}")
                with col2:
                    st.metric("EPS", f"{row['EPS']:,.0f}")
                with col3:
                    st.metric("ROE", f"{row['ROE (%)']:.1f}%")
                with col4:
                    st.metric("N·ª£/V·ªën", f"{row['N·ª£/V·ªën']:.2f}")
                
                # Kho·∫£ng c√°ch
                col1, col2 = st.columns(2)
                with col1:
                    st.info(f"üìè Kho·∫£ng c√°ch A+: {row['Kho·∫£ng c√°ch A+']:.4f}")
                with col2:
                    st.info(f"üìè Kho·∫£ng c√°ch A-: {row['Kho·∫£ng c√°ch A-']:.4f}")
        
        # Bi·ªÉu ƒë·ªì radar so s√°nh
        st.markdown("---")
        st.subheader("üìä Bi·ªÉu ƒë·ªì so s√°nh ƒëa chi·ªÅu")
        
        # Chu·∫©n h√≥a d·ªØ li·ªáu cho radar chart (0-100)
        radar_cols = ['Bi·∫øn ƒë·ªông gi√° (%)', 'P/E', 'EPS', 'ROE (%)', 'N·ª£/V·ªën']
        radar_data = []
        
        for idx, row in results_df.iterrows():
            radar_data.append(go.Scatterpolar(
                r=[
                    (row['Bi·∫øn ƒë·ªông gi√° (%)'] + 10) * 5,  # Chuy·ªÉn v·ªÅ 0-100
                    100 - (row['P/E'] / results_df['P/E'].max() * 100),  # ƒê·∫£o ng∆∞·ª£c v√¨ th·∫•p t·ªët h∆°n
                    row['EPS'] / results_df['EPS'].max() * 100,
                    row['ROE (%)'] / results_df['ROE (%)'].max() * 100,
                    100 - (row['N·ª£/V·ªën'] / results_df['N·ª£/V·ªën'].max() * 100)  # ƒê·∫£o ng∆∞·ª£c
                ],
                theta=['Bi·∫øn ƒë·ªông gi√°', 'P/E', 'EPS', 'ROE', 'N·ª£/V·ªën'],
                fill='toself',
                name=row['M√£ CP']
            ))
        
        fig_radar = go.Figure(data=radar_data)
        fig_radar.update_layout(
            polar=dict(radialaxis=dict(visible=True, range=[0, 100])),
            showlegend=True,
            height=500
        )
        st.plotly_chart(fig_radar, use_container_width=True)
        
        # Gi·∫£i th√≠ch
        st.success("""
        ### üìñ Gi·∫£i th√≠ch k·∫øt qu·∫£:
        
        - **ƒêi·ªÉm TOPSIS cao (‚â•70):** C·ªï phi·∫øu c√≥ ti·ªÅm nƒÉng t·ªët, r·ªßi ro th·∫•p
        - **ƒêi·ªÉm TOPSIS trung b√¨nh (50-70):** C·ªï phi·∫øu ·ªïn ƒë·ªãnh, c√¢n nh·∫Øc k·ªπ tr∆∞·ªõc khi ƒë·∫ßu t∆∞
        - **ƒêi·ªÉm TOPSIS th·∫•p (<50):** C·ªï phi·∫øu c√≥ r·ªßi ro cao, c·∫ßn th·∫≠n tr·ªçng
        - **A+ (Ideal Positive):** Gi·∫£i ph√°p l√Ω t∆∞·ªüng d∆∞∆°ng - c√°c gi√° tr·ªã t·ªët nh·∫•t
        - **A- (Ideal Negative):** Gi·∫£i ph√°p l√Ω t∆∞·ªüng √¢m - c√°c gi√° tr·ªã x·∫•u nh·∫•t
        
        **L∆∞u √Ω:** K·∫øt qu·∫£ ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o. C·∫ßn k·∫øt h·ª£p v·ªõi ph√¢n t√≠ch k·ªπ thu·∫≠t v√† c∆° b·∫£n kh√°c.
        """)